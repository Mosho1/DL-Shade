// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('DLApp').directive('aceEditor', function() {
    return {
      restrict: 'A',
      require: '?ngModel',
      scope: false,
      link: function(scope, elm, attrs, ngModel) {
        var acee, session;
        scope.acee = acee = window.ace.edit(elm[0]);
        scope.session = session = acee.getSession();
        scope.mode = attrs.mode;
        scope.makeCompletions = function(prefix, collection, meta) {
          return collection.filter(function(elm) {
            return elm.substring(0, prefix.length).toUpperCase() === prefix.toUpperCase();
          }).map(function(elm) {
            return {
              name: elm,
              value: elm,
              meta: meta
            };
          });
        };
        acee.setTheme("ace/theme/solarized_light");
        acee.getSession().setMode("ace/mode/" + scope.mode);
        acee.setOptions({
          showGutter: true,
          enableCustomAutocompletion: true
        });
        acee.setReadOnly(false);
        acee.setHighlightActiveLine(false);
        acee.setShowPrintMargin(false);
        acee.commands.on("afterExec", function(e) {
          if (e.command.name === "insertstring" && /^[\w.]$/.test(e.args)) {
            acee.execCommand("startCustomAutocomplete");
          }
        });
        scope.themes = ['merbivore', 'merbivore_soft', 'mono_industrial', 'monokai', 'pastel_on_dark', 'solarized_dark', 'solarized_light', 'terminal', 'textmate', 'tomorrow', 'tomorrow_night', 'tomorrow_night_blue', 'tomorrow_night_eighties', 'twilight', 'vibrant_ink', 'xcode'];
        scope.setTheme = function(name) {
          return scope.acee.setTheme("ace/theme/" + name);
        };
        if (angular.isDefined(ngModel)) {
          ngModel.$formatters.push(function(value) {
            if (angular.isUndefined(value) || value === null) {
              return '';
            } else if (angular.isObject(value) || angular.isArray(value)) {
              throw new Error('ace-editor cannot use an object or an array as a model');
            }
            return value;
          });
          ngModel.$render = function() {
            return session.setValue(ngModel.$viewValue);
          };
        }
        return session.on('change', function(e) {
          var newValue;
          newValue = session.getValue();
          if (newValue !== scope.$eval(attrs.value) && !scope.$$phase && angular.isDefined(ngModel)) {
            return scope.$apply(function() {
              return ngModel.$setViewValue(newValue);
            });
          }
        });
      },
      controller: function($scope, $rootScope) {
        return $rootScope.$on('panel_resized', function() {
          return $scope.acee.resize();
        });
      }
    };
  }).directive('dlEditor', function(Graph) {
    return {
      restrict: 'A',
      scope: false,
      link: function(scope, elm, attrs) {
        var DLcompleter;
        scope.langTools = window.ace.require("ace/ext/language_tools");
        DLcompleter = {
          getCompletions: function(editor, session, pos, prefix, callback) {
            var functions, identifiers, nameList;
            if (session.$modeId !== "ace/mode/" + attrs.mode) {
              return callback(null, []);
            }
            identifiers = scope.makeCompletions(prefix, Object.keys(scope.graph.variables.variables), "variable");
            functions = scope.makeCompletions(prefix, Graph.getFunctions(), "function");
            nameList = identifiers.concat(functions);
            return callback(null, nameList);
          }
        };
        return scope.langTools.addCompleter(DLcompleter);
      }
    };
  }).directive('shadeEditor', function(Graph, ShadeIdentifiers) {
    return {
      restrict: 'A',
      scope: false,
      link: function(scope, elm, attrs) {
        var DLcompleter;
        scope.langTools = window.ace.require("ace/ext/language_tools");
        DLcompleter = {
          getCompletions: function(editor, session, pos, prefix, callback) {
            var nameList;
            if (session.$modeId !== "ace/mode/" + attrs.mode) {
              return callback(null, []);
            }
            nameList = [];
            _.each(ShadeIdentifiers, function(dict) {
              return nameList = nameList.concat(scope.makeCompletions(prefix, dict.keys, dict.type));
            });
            return callback(null, nameList);
          }
        };
        return scope.langTools.addCompleter(DLcompleter);
      }
    };
  });

}).call(this);
