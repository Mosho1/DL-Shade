// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('DLApp').directive('splitRow', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {
        styles: '=',
        graph: '=',
        cols: '=',
        col: '=',
        litcoffee: '='
      },
      replace: true,
      template: '<div class="split-row" ng-transclude></div>',
      controller: function($scope, $element, $compile, $rootScope, $window) {
        var body, cols, dragged;
        $scope.row = $element[0];
        cols = $scope.cols = [];
        $scope.col = function(name) {
          var c;
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = cols.length; _i < _len; _i++) {
              c = cols[_i];
              if (c.name === name) {
                _results.push(c);
              }
            }
            return _results;
          })())[0];
        };
        body = document.getElementsByTagName("body")[0];
        body.addEventListener('click', function() {
          return $rootScope.$broadcast('bg_click');
        });
        $(document).keyup(function(e) {
          if (e.keyCode === 27) {
            return $rootScope.$broadcast('bg_click');
          }
        });
        this.equalCols = function(ncols) {
          var c, new_ratio, _i, _len, _results;
          ncols || (ncols = ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = cols.length; _i < _len; _i++) {
              c = cols[_i];
              if (c.show) {
                _results.push(c);
              }
            }
            return _results;
          })()).length);
          new_ratio = 1 / ncols;
          _results = [];
          for (_i = 0, _len = cols.length; _i < _len; _i++) {
            c = cols[_i];
            if (c.show) {
              _results.push(c.ratio = new_ratio);
            } else {
              _results.push(c.ratio = 0);
            }
          }
          return _results;
        };
        this.findLastCol = function() {
          var c, last_shown, _i, _len;
          if (!cols.length) {
            return;
          }
          last_shown = null;
          for (_i = 0, _len = cols.length; _i < _len; _i++) {
            c = cols[_i];
            c.last_shown = false;
            if (c.show) {
              last_shown = c;
            }
          }
          if (last_shown) {
            return last_shown.last_shown = true;
          }
        };
        this.addCol = function(col) {
          return $scope.$apply((function(_this) {
            return function() {
              col.index = cols.length;
              cols.push(col);
              _this.equalCols();
              return col.div.append($compile('<drag-area ng-show="!last_shown"></drag-area>')(col));
            };
          })(this));
        };
        $window.r = $scope.row;
        dragged = (function(_this) {
          return function(x) {
            return $scope.$apply(function() {
              var after, before, c, cumRatio, i;
              before = $scope.dragging;
              after = cols[i = before.index + 1];
              while (!after.show) {
                after = cols[++i];
              }
              cumRatio = ((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = cols.length; _i < _len; _i++) {
                  c = cols[_i];
                  if (c.index < before.index) {
                    _results.push(c.ratio);
                  }
                }
                return _results;
              })()).reduce((function(t, s) {
                return t + s;
              }), 0);
              before.ratio = (x - $scope.row.offsetLeft) / _this.row_width - cumRatio;
              if (before.ratio < 0.1) {
                before.ratio = 0.1;
              }
              after.ratio = 1 - ((function() {
                var _results;
                _results = [];
                for (i in cols) {
                  if (parseInt(i) !== after.index) {
                    _results.push(cols[i].ratio);
                  }
                }
                return _results;
              })()).reduce((function(t, s) {
                return t + s;
              }), 0);
              if (after.ratio < 0.1) {
                after.ratio = 0.1;
                before.ratio = 1 - ((function() {
                  var _results;
                  _results = [];
                  for (i in cols) {
                    if (parseInt(i) !== before.index) {
                      _results.push(cols[i].ratio);
                    }
                  }
                  return _results;
                })()).reduce((function(t, s) {
                  return t + s;
                }), 0);
              }
              if (before.div[0].onresize) {
                before.div[0].onresize();
              }
              if (after.div[0].onresize) {
                after.div[0].onresize();
              }
              return $rootScope.$broadcast('panel_resized');
            });
          };
        })(this);
        ($scope.row.onresize = (function(_this) {
          return function() {
            return _this.row_width = $scope.row.offsetWidth;
          };
        })(this))();
        this.start_drag = function(col, e) {
          _.kill_event(e);
          return $scope.dragging = col;
        };
        document.onmousemove = function(e) {
          e.preventDefault();
          if ($scope.dragging) {
            dragged(e.clientX);
          }
          if (!e.caughtBy) {
            return $rootScope.$broadcast('mousemoved');
          }
        };
        document.onmouseup = function() {
          return $scope.dragging = null;
        };
      }
    };
  }).directive('resizablePanel', function($rootScope) {
    return {
      require: '^splitRow',
      restrict: 'E',
      transclude: true,
      scope: {
        name: '@',
        show: '@'
      },
      replace: true,
      template: '<div class="resizable-panel" ng-transclude ng-style="{width: \'\'+(ratio*100)+\'%\'}" ng-show="show"></div>',
      controller: function($scope, $rootScope) {
        return $scope.$watch('show', function() {
          $scope.show = !!$scope.show;
          $scope.ctrl.equalCols();
          $scope.ctrl.findLastCol();
          return setTimeout(function() {
            return $rootScope.$broadcast('panel_resized');
          });
        });
      },
      link: function(scope, elm, attrs, splitRowCtrl) {
        scope.themes = [];
        scope.div = elm;
        scope.ctrl = splitRowCtrl;
        scope.mouseover = false;
        setTimeout((function() {
          scope.show = !!scope.show;
          return splitRowCtrl.addCol(scope);
        }), 0);
        elm.bind('mousemove', function(e) {
          e.originalEvent.caughtBy = scope.name;
          if (!scope.mouseover) {
            return $rootScope.$broadcast('mousemoved', scope.name);
          }
        });
        return scope.$on('mousemoved', function(e, name) {
          return scope.$apply(function() {
            return scope.mouseover = name === scope.name;
          });
        });
      }
    };
  }).directive('dragArea', function() {
    return {
      restrict: 'E',
      replace: true,
      template: '<div class="drag-area"></div>',
      scope: false,
      link: function(scope, elm, attrs) {
        return elm.bind('mousedown', function(e) {
          return scope.ctrl.start_drag(scope, e);
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=split-panel.map
