/* parser generated by jison 0.4.13 */
/*
 Returns a Parser object of the following structure:

 Parser: {
 yy: {}
 }

 Parser.prototype: {
 yy: {},
 trace: function(),
 symbols_: {associative list: name ==> number},
 terminals_: {associative list: number ==> name},
 productions_: [...],
 performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
 table: [...],
 defaultActions: {...},
 parseError: function(str, hash),
 parse: function(input),

 lexer: {
 EOF: 1,
 parseError: function(str, hash),
 setInput: function(input),
 input: function(),
 unput: function(str),
 more: function(),
 less: function(n),
 pastInput: function(),
 upcomingInput: function(),
 showPosition: function(),
 test_match: function(regex_match_array, rule_index),
 next: function(),
 lex: function(),
 begin: function(condition),
 popState: function(),
 _currentRules: function(),
 topState: function(),
 pushState: function(condition),

 options: {
 ranges: boolean           (optional: true ==> token location info will include a .range[] member)
 flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
 backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
 },

 performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 rules: [...],
 conditions: {associative list: name ==> set},
 }
 }


 token location info (@$, _$, etc.): {
 first_line: n,
 last_line: n,
 first_column: n,
 last_column: n,
 range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
 }


 the parseError function receives a 'hash' object with these members for lexer and parser errors: {
 text:        (matched text)
 token:       (the produced terminal token, if any)
 line:        (yylineno)
 }
 while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
 loc:         (yylloc)
 expected:    (string describing the set of expected tokens)
 recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
 }
 */
var parser = (function(){
    var parser = {trace: function trace(){},
        yy: {},
        symbols_: {"error":2,"program":3,"EOF":4,"body":5,"line":6,"TERMINATOR":7,"PRINT":8,"expr":9,"classdef":10,"assignment":11,"ifblocks":12,"IF":13,"(":14,")":15,"block":16,"ELSE":17,"elseifs":18,"{":19,"}":20,"VAR":21,"IDENTIFIER":22,"ASSIGN":23,"VAL":24,"MATH":25,"COMPARE":26,"BOOLOP":27,"TERNARY":28,":":29,"closure":30,"instantiation":31,"variablecall":32,"type":33,"namespace":34,"$cx":35,"parameters":36,"parameter":37,",":38,"arguments":39,"FUN":40,"CLASS":41,"classbody":42,"classline":43,"method":44,"PUBLIC":45,"NEW":46,"objectref":47,".":48,"LONG":49,"DOUBLE":50,"STRING":51,"BOOLEAN":52,"csv":53,"NULL":54,"$accept":0,"$end":1},
        terminals_: {2:"error",4:"EOF",7:"TERMINATOR",8:"PRINT",13:"IF",14:"(",15:")",17:"ELSE",19:"{",20:"}",21:"VAR",22:"IDENTIFIER",23:"ASSIGN",24:"VAL",25:"MATH",26:"COMPARE",27:"BOOLOP",28:"TERNARY",29:":",35:"$cx",38:",",40:"FUN",41:"CLASS",45:"PUBLIC",46:"NEW",48:".",49:"LONG",50:"DOUBLE",51:"STRING",52:"BOOLEAN",54:"NULL"},
        productions_: [0,[3,1],[3,2],[5,1],[5,3],[5,2],[5,1],[6,2],[6,1],[6,1],[6,1],[6,1],[12,5],[12,7],[12,6],[12,8],[18,6],[18,7],[16,2],[16,3],[11,4],[11,4],[11,3],[9,3],[9,3],[9,3],[9,3],[9,5],[9,1],[9,1],[9,1],[9,1],[9,1],[34,2],[36,1],[36,3],[37,3],[37,4],[37,4],[39,1],[39,3],[30,6],[30,7],[10,5],[42,1],[42,3],[42,2],[43,1],[44,8],[44,9],[31,4],[32,3],[32,4],[32,1],[47,1],[47,3],[33,1],[33,1],[33,1],[33,1],[33,3],[33,1],[53,1],[53,3]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
                                          /**/) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    break;
                case 2: return $$[$0-1];
                    break;
                case 3:this.$ = [$$[$0]];
                    break;
                case 4: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
                    break;
                case 7:this.$ = new yy.Print($$[$0]);
                    break;
                case 12:this.$ = new yy.IfBlock($$[$0-2], $$[$0]);
                    break;
                case 13:this.$ = new yy.IfBlock($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 14: this.$ = new yy.IfBlock($$[$0-3], $$[$0-1], false, $$[$0]);
                    break;
                case 15: this.$ = new yy.IfBlock($$[$0-5], $$[$0-3], $$[$0], $$[$0-2]);
                    break;
                case 16: this.$ = [new yy.ElseIfBlock($$[$0-2], $$[$0])];
                    break;
                case 17: this.$ = $$[$0-6]; $$[$0-6].push(new yy.ElseIfBlock($$[$0-2], $$[$0]));
                    break;
                case 18: this.$ = [];
                    break;
                case 19: this.$ = $$[$0-1];
                    break;
                case 20: this.$ = new yy.AssignVariable($$[$0-2], $$[$0], $$[$0-1]);
                    break;
                case 21: this.$ = new yy.AssignValue($$[$0-2], $$[$0], $$[$0-1]);
                    break;
                case 22: this.$ = new yy.SetVariable($$[$0-2], $$[$0], $$[$0-1]);
                    break;
                case 23:this.$ = new yy.BracketBlock($$[$0-1]);
                    break;
                case 24:this.$ = new yy.Math($$[$0-2], $$[$0], $$[$0-1]);
                    break;
                case 25:this.$ = new yy.Comparison($$[$0-2], $$[$0], $$[$0-1]);
                    break;
                case 26:this.$ = new yy.Comparison($$[$0-2], $$[$0], $$[$0-1]);
                    break;
                case 27:this.$ = new yy.Ternary($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 33:this.$ = new yy.Namespace($$[$0]);
                    break;
                case 34: this.$ = [$$[$0]]
                    break;
                case 35: this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
                    break;
                case 36:this.$ = new yy.ValueParameter($$[$0-2], $$[$0]);
                    break;
                case 37:this.$ = new yy.ValueParameter($$[$0-2], $$[$0]);
                    break;
                case 38:this.$ = new yy.VariableParameter($$[$0-2], $$[$0]);
                    break;
                case 39: this.$ = [$$[$0]];
                    break;
                case 40: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
                    break;
                case 41:this.$ = new yy.Closure($$[$0], $$[$0-1]);
                    break;
                case 42:this.$ = new yy.Closure($$[$0], $$[$0-4], $$[$0-1]);
                    break;
                case 43:this.$ = new yy.Class($$[$0-3], $$[$0-1]);
                    break;
                case 44: this.$ = [$$[$0]];
                    break;
                case 45: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
                    break;
                case 48:this.$ = new yy.Method($$[$0-7], $$[$0-5], $$[$0]);
                    break;
                case 49:this.$ = new yy.Method($$[$0-8], $$[$0-6], $$[$0], $$[$0-4]);
                    break;
                case 50:this.$ = new yy.ClassInstantiation($$[$0-2]);
                    break;
                case 51:this.$ = new yy.CallFunction($$[$0-2]);
                    break;
                case 52:this.$ = new yy.CallFunction($$[$0-3], $$[$0-1]);
                    break;
                case 53:this.$ = new yy.CallVariable($$[$0]);
                    break;
                case 54: this.$ = [$$[$0]];
                    break;
                case 55: this.$ = $$[$0-2]; this.$.push($$[$0]);
                    break;
                case 56:this.$ = new yy.Long($$[$0]);
                    break;
                case 57:this.$ = new yy.Double($$[$0]);
                    break;
                case 58:this.$ = new yy.String($$[$0]);
                    break;
                case 59:this.$ = new yy.Boolean($$[$0]);
                    break;
                case 60:this.$ = new yy.Array($$[$0-1]);
                    break;
                case 61:this.$ = new yy.Null($$[$0]);
                    break;
                case 62:this.$ = [$$[$0]];
                    break;
                case 63: $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
                    break;
            }
        },
        table: [{3:1,4:[1,2],5:3,6:4,7:[1,5],8:[1,6],9:10,10:7,11:8,12:9,13:[1,15],14:[1,16],19:[1,29],21:[1,12],22:[1,14],24:[1,13],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],41:[1,11],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{1:[3]},{1:[2,1]},{4:[1,32],7:[1,33]},{4:[2,3],7:[2,3],20:[2,3]},{4:[2,6],7:[2,6],20:[2,6]},{9:34,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{4:[2,8],7:[2,8],20:[2,8]},{4:[2,9],7:[2,9],20:[2,9]},{4:[2,10],7:[2,10],20:[2,10]},{4:[2,11],7:[2,11],20:[2,11],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{22:[1,40]},{22:[1,41]},{22:[1,42]},{4:[2,54],7:[2,54],14:[2,54],20:[2,54],23:[1,43],25:[2,54],26:[2,54],27:[2,54],28:[2,54],48:[2,54]},{14:[1,44]},{9:45,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{4:[2,28],7:[2,28],15:[2,28],20:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],38:[2,28]},{4:[2,29],7:[2,29],15:[2,29],20:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],38:[2,29]},{4:[2,30],7:[2,30],15:[2,30],20:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],38:[2,30]},{4:[2,31],7:[2,31],15:[2,31],20:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],38:[2,31]},{4:[2,32],7:[2,32],15:[2,32],20:[2,32],25:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],38:[2,32]},{14:[1,46]},{22:[1,47]},{4:[2,53],7:[2,53],14:[1,48],15:[2,53],20:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],38:[2,53],48:[1,49]},{4:[2,56],7:[2,56],15:[2,56],20:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],38:[2,56]},{4:[2,57],7:[2,57],15:[2,57],20:[2,57],25:[2,57],26:[2,57],27:[2,57],28:[2,57],29:[2,57],38:[2,57]},{4:[2,58],7:[2,58],15:[2,58],20:[2,58],25:[2,58],26:[2,58],27:[2,58],28:[2,58],29:[2,58],38:[2,58]},{4:[2,59],7:[2,59],15:[2,59],20:[2,59],25:[2,59],26:[2,59],27:[2,59],28:[2,59],29:[2,59],38:[2,59]},{9:51,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],53:50,54:[1,30]},{4:[2,61],7:[2,61],15:[2,61],20:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],29:[2,61],38:[2,61]},{22:[1,52]},{1:[2,2]},{4:[2,5],6:53,7:[2,5],8:[1,6],9:10,10:7,11:8,12:9,13:[1,15],14:[1,16],19:[1,29],20:[2,5],21:[1,12],22:[1,14],24:[1,13],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],41:[1,11],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{4:[2,7],7:[2,7],20:[2,7],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{4:[2,54],7:[2,54],14:[2,54],15:[2,54],20:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],38:[2,54],48:[2,54]},{9:54,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{9:55,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{9:56,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{9:57,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{19:[1,58]},{23:[1,59]},{23:[1,60]},{9:61,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{9:62,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{15:[1,63],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{15:[1,64],21:[1,69],22:[1,67],24:[1,68],36:65,37:66},{14:[1,70]},{9:73,14:[1,16],15:[1,71],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],39:72,40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{22:[1,74]},{20:[1,75],38:[1,76]},{20:[2,62],25:[1,36],26:[1,37],27:[1,38],28:[1,39],38:[2,62]},{4:[2,33],7:[2,33],15:[2,33],20:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],38:[2,33]},{4:[2,4],7:[2,4],20:[2,4]},{4:[2,24],7:[2,24],15:[2,24],20:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],38:[2,24]},{4:[2,25],7:[2,25],15:[2,25],20:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],38:[2,25]},{4:[2,26],7:[2,26],15:[2,26],20:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],38:[2,26]},{25:[1,36],26:[1,37],27:[1,38],28:[1,39],29:[1,77]},{42:78,43:79,44:80,45:[1,81]},{9:82,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{9:83,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{4:[2,22],7:[2,22],20:[2,22],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{15:[1,84],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{4:[2,23],7:[2,23],15:[2,23],20:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],38:[2,23]},{29:[1,85]},{15:[1,86],38:[1,87]},{15:[2,34],38:[2,34]},{29:[1,88]},{22:[1,89]},{22:[1,90]},{15:[1,91]},{4:[2,51],7:[2,51],15:[2,51],20:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],38:[2,51]},{15:[1,92],38:[1,93]},{15:[2,39],25:[1,36],26:[1,37],27:[1,38],28:[1,39],38:[2,39]},{4:[2,55],7:[2,55],14:[2,55],15:[2,55],20:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],38:[2,55],48:[2,55]},{4:[2,60],7:[2,60],15:[2,60],20:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],29:[2,60],38:[2,60]},{9:94,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{9:95,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{7:[1,97],20:[1,96]},{7:[2,44],20:[2,44]},{7:[2,47],20:[2,47]},{40:[1,98]},{4:[2,20],7:[2,20],20:[2,20],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{4:[2,21],7:[2,21],20:[2,21],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{16:99,19:[1,100]},{22:[1,101]},{29:[1,102]},{21:[1,69],22:[1,67],24:[1,68],37:103},{22:[1,104]},{29:[1,105]},{29:[1,106]},{4:[2,50],7:[2,50],15:[2,50],20:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],38:[2,50]},{4:[2,52],7:[2,52],15:[2,52],20:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],38:[2,52]},{9:107,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{20:[2,63],25:[1,36],26:[1,37],27:[1,38],28:[1,39],38:[2,63]},{4:[2,27],7:[2,27],15:[2,27],20:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],38:[2,27]},{4:[2,43],7:[2,43],20:[2,43]},{7:[2,46],20:[2,46],43:108,44:80,45:[1,81]},{22:[1,109]},{4:[2,12],7:[2,12],17:[1,110],18:111,20:[2,12]},{5:113,6:4,7:[1,5],8:[1,6],9:10,10:7,11:8,12:9,13:[1,15],14:[1,16],19:[1,29],20:[1,112],21:[1,12],22:[1,14],24:[1,13],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],41:[1,11],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{16:114,19:[1,100]},{22:[1,115]},{15:[2,35],38:[2,35]},{15:[2,36],38:[2,36]},{22:[1,116]},{22:[1,117]},{15:[2,40],25:[1,36],26:[1,37],27:[1,38],28:[1,39],38:[2,40]},{7:[2,45],20:[2,45]},{14:[1,118]},{13:[1,120],16:119,19:[1,100]},{4:[2,14],7:[2,14],17:[1,121],20:[2,14]},{4:[2,18],7:[2,18],15:[2,18],17:[2,18],20:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],38:[2,18]},{7:[1,33],20:[1,122]},{4:[2,41],7:[2,41],15:[2,41],20:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],38:[2,41]},{16:123,19:[1,100]},{15:[2,37],38:[2,37]},{15:[2,38],38:[2,38]},{15:[1,124],21:[1,69],22:[1,67],24:[1,68],36:125,37:66},{4:[2,13],7:[2,13],20:[2,13]},{14:[1,126]},{13:[1,128],16:127,19:[1,100]},{4:[2,19],7:[2,19],15:[2,19],17:[2,19],20:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],38:[2,19]},{4:[2,42],7:[2,42],15:[2,42],20:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],38:[2,42]},{29:[1,129]},{15:[1,130],38:[1,87]},{9:131,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{4:[2,15],7:[2,15],20:[2,15]},{14:[1,132]},{22:[1,133]},{29:[1,134]},{15:[1,135],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{9:136,14:[1,16],19:[1,29],22:[1,35],30:17,31:18,32:19,33:20,34:21,35:[1,31],40:[1,22],46:[1,23],47:24,49:[1,25],50:[1,26],51:[1,27],52:[1,28],54:[1,30]},{16:137,19:[1,100]},{22:[1,138]},{16:139,19:[1,100]},{15:[1,140],25:[1,36],26:[1,37],27:[1,38],28:[1,39]},{7:[2,48],20:[2,48]},{16:141,19:[1,100]},{4:[2,16],7:[2,16],17:[2,16],20:[2,16]},{16:142,19:[1,100]},{7:[2,49],20:[2,49]},{4:[2,17],7:[2,17],17:[2,17],20:[2,17]}],
        defaultActions: {2:[2,1],32:[2,2]},
        parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
        parse: function parse(input) {
            var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == 'undefined') {
                this.lexer.yylloc = {};
            }
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === 'function') {
                this.parseError = this.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            this.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }};


    parser._performAction = parser.performAction;
    parser.performAction = function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {
        var ret = parser._performAction.call(this, yytext, yyleng, yylineno, yy, yystate, $$, _$);
        if (this.$._type) {
            this.$.lineNo = yylineno;
        }
        return ret;
    };

    function Parser () {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}