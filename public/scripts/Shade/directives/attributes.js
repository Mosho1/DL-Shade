// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('ShadeApp').directive('format', function(format) {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: {
        pre: function(scope, elm, attr, ngModel) {
          var formatStr;
          formatStr = attr.format;
          if (angular.isDefined(ngModel)) {
            ngModel.$formatters.push(function(value) {
              if (angular.isNumber(value)) {
                return value = format(value, formatStr);
              }
            });
            ngModel.$parsers.unshift(function(value) {
              if (isNaN(value)) {
                value = ngModel.$modelValue;
              }
              return +value;
            });
            return elm.on('blur', function() {
              if (isNaN(elm.val())) {
                return elm.val(format(+ngModel.$modelValue, formatStr));
              } else {
                return elm.val(format(+elm.val(), formatStr));
              }
            });
          }
        }
      }
    };
  }).directive('vActiveTabIndex', function() {
    return {
      restrict: 'A',
      link: function(scope, elm, attr) {
        scope.vactive = attr.vActiveTabIndex;
        scope.$watch('vars[vactive].model', function(vactive) {
          vactive = Number(vactive);
          if (angular.isDefined(scope.tabs[vactive])) {
            return _.each(scope.tabs, function(tab, ind) {
              tab.active = false;
              if (ind === vactive) {
                return tab.active = true;
              }
            });
          }
        });
        return scope.$watch('active', function(active) {
          return scope.vars[scope.vactive].model = active;
        });
      }
    };
  }).directive('vSub', function($compile, shadeData, shadeTemplate, x2js) {
    return {
      restrict: 'A',
      link: function(scope, elm, attr) {
        scope.vSub = attr.vSub;
        return scope.$watch('vSub', function() {
          var body, content, shadeNode;
          shadeNode = shadeData.getElementById(attr.shdId);
          shadeNode.Sub.Node.push((x2js.xml2json(scope.vars[scope.vSub].model)).Node);
          content = shadeTemplate.toHTML({
            Shade: {
              Node: shadeNode
            }
          });
          body = angular.element(content.body);
          elm.html(body.html());
          return $compile(elm.contents())(scope);
        });
      }
    };
  });

}).call(this);
