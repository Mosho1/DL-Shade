#shadeTemplate service
#=====
#Compiles XML Shade to HTML
angular.module('ShadeApp')

.service 'shadeTemplate', ($http, x2js, ShadeParser, ShadeAttrDictionary) ->

  template = ->

  #Get the template to be used by *Lo-Dash*'s templating utility.
  $http.get('/scripts/Shade/ng_template_shd.ejs')
  .success((data)->
      _.templateSettings.variable = "shd";
      #Create the templating function.
      template = _.template(data)
    )
  .error(()->
      console.log("Could not retrieve shade template"))

  #This function accepts shade in either XML-string or JSON formats.
  @toHTML = (shade) ->
    #In case this is an XML string, translate to JSON format.
    unless angular.isObject shade
      shade = x2js.xml2json(shade)
    #Creates the object to be passed to the template function. Consists of:
    #- Shade in JSON format
    #- Dictionary to be used to translate Shade names to HTML names.
    parsed = ShadeParser.parse(shade) || {}
    _.extend parsed, ShadeAttrDictionary

    #Returns an object:
    #- body - HTML output.
    body: template(parsed),
    #- styles - Styles generated by the Shade parser.
    styles: parsed.styles,
    #- Array of the Shade nodes, sorted by id. Each HTML element has the id as a `shd-id` attribute.
    elementsById: parsed.elementsById

  @
