// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('ShadeApp').factory('ngGridFlexibleHeightPlugin', function() {
    var ngGridFlexibleHeightPlugin;
    return ngGridFlexibleHeightPlugin = function(opts) {
      var self;
      self = this;
      self.grid = null;
      self.scope = null;
      self.init = function(scope, grid, services) {
        var innerRecalcForData, recalcHeightForData;
        self.domUtilityService = services.DomUtilityService;
        self.grid = grid;
        self.scope = scope;
        recalcHeightForData = function() {
          setTimeout(innerRecalcForData, 1);
        };
        innerRecalcForData = function() {
          var extraHeight, footerPanelSel, gridId, naturalHeight, newViewportHeight;
          gridId = self.grid.gridId;
          footerPanelSel = "." + gridId + " .ngFooterPanel";
          extraHeight = self.grid.$topPanel.height() + $(footerPanelSel).height();
          naturalHeight = self.grid.$canvas.height() + 1;
          if (opts != null) {
            if ((opts.minHeight != null) && (naturalHeight + extraHeight) < opts.minHeight) {
              naturalHeight = opts.minHeight - extraHeight - 2;
            }
            if ((opts.maxHeight != null) && (naturalHeight + extraHeight) > opts.maxHeight) {
              naturalHeight = opts.maxHeight - extraHeight - 2;
            }
          }
          newViewportHeight = naturalHeight + 2;
          if (!self.scope.baseViewportHeight || self.scope.baseViewportHeight !== newViewportHeight) {
            self.grid.$viewport.css("height", newViewportHeight + "px");
            self.grid.$root.css("height", (newViewportHeight + extraHeight) + "px");
            self.scope.baseViewportHeight = newViewportHeight;
            self.domUtilityService.RebuildGrid(self.scope, self.grid);
          }
        };
        self.scope.catHashKeys = function() {
          var hash, idx;
          hash = "";
          idx = void 0;
          for (idx in self.scope.renderedRows) {
            hash += self.scope.renderedRows[idx].$$hashKey;
          }
          return hash;
        };
        self.scope.$watch("catHashKeys()", innerRecalcForData);
        self.scope.$watch(self.grid.config.data, recalcHeightForData);
      };
    };
  });

}).call(this);
